# -*- coding: utf-8 -*-
"""python_Interview_Questions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oQmKJwOGAu2BKXR1ALXrZYtN1mPdwYb8

# ***1. Find and Calculate Square Root Using Input.***
"""



"""# **2. Find The area Of Triangle**"""

# Ans - 01

a = int(input("Enter base of triangle: "))
b = int(input("Enter height of triangle: "))

c = 0.5 * a * b

print(f"The area of the triangle is: {c}")

"""# **3. Swap Two Variables. Channge the Place.**"""

#03 Ans - 01 method

# Input
a = int(input("Enter the value of a: "))
b = int(input("Enter the value of b: "))

# Swap using a temporary variable
temp = a
a = b
b = temp

# Display swapped values
print(f"After swapping: a = {a}, b = {b}")

#03 Ans - 02 method

# Input
a = int(input("Enter the value of a: "))
b = int(input("Enter the value of b: "))

# Swap without using a temporary variable
a = a + b
b = a - b
a = a - b

# Display swapped values
print(f"After swapping: a = {a}, b = {b}")

#03 Ans - 03 method

# Input
a = int(input("Enter the value of a: "))
b = int(input("Enter the value of b: "))

# Swap without using a temporary variable
a = a + b
b = a - b
a = a - b

# Display swapped values
print(f"After swapping: a = {a}, b = {b}")

"""# **1. Print Hello World.**"""

# Method 1: Using the print() function
print("Hello World")

# Method 2: Using a variable
message = "Hello World"
print(message)

# Method 3: Using a function
def print_hello():
    print("Hello World")

print_hello()

# Method 4: Using string concatenation
hello = "Hello"
world = "World"
print(hello + " " + world)

# Method 5: Using f-strings
hello = "Hello"
world = "World"
print(f"{hello} {world}")

# Method 6: Using format()
hello = "Hello"
world = "World"
print("{} {}".format(hello, world))

# Method 7: Using string interpolation
hello = "Hello"
world = "World"
print(f"{hello=}, {world=}")

# Method 8: Using join()
hello = "Hello"
world = "World"
print(" ".join([hello, world]))

# Method 9: Using unpacking in print()
hello = "Hello"
world = "World"
print(*[hello, world])

# Method 10: Using a list and * operator
hello_world = ["Hello", "World"]
print(*hello_world)

"""# **2. Write a Program to add two numbers.**"""

# Method 1: Direct addition
num1 = 5
num2 = 10
sum_result = num1 + num2
print("Sum:", sum_result)

# Method 2: Using a function
def add_numbers(a, b):
    """
    Function to add two numbers
    :param a: First number
    :param b: Second number
    :return: Sum of the two numbers
    """
    return a + b

# Example usage
num1 = 5
num2 = 10
result = add_numbers(num1, num2)
print("Sum:", result)

# Method 3: Taking input from the user
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))
sum_result = num1 + num2
print("Sum:", sum_result)

# Method 5: Using a list
numbers = [5, 10]
sum_result = sum(numbers)
print("Sum:", sum_result)

# Method 6: Using a dictionary
numbers = {'num1': 5, 'num2': 10}
sum_result = numbers['num1'] + numbers['num2']
print("Sum:", sum_result)

# Method 7: Using a lambda function
add_numbers = lambda a, b: a + b
num1 = 5
num2 = 10
sum_result = add_numbers(num1, num2)
print("Sum:", sum_result)

# Method 8: Using a class
class Adder:
    def __init__(self, a, b):
        self.num1 = a
        self.num2 = b

    def add_numbers(self):
        return self.num1 + self.num2

# Example usage
num1 = 5
num2 = 10
adder = Adder(num1, num2)
sum_result = adder.add_numbers()
print("Sum:", sum_result)

# Method 9: Using the sum function with an iterable
numbers = [5, 10]
sum_result = sum(numbers)
print("Sum:", sum_result)

# Method 10: Using the reduce function from the functools module
from functools import reduce

numbers = [5, 10]
sum_result = reduce(lambda x, y: x + y, numbers)
print("Sum:", sum_result)

# Method 11: Using the operator module
import operator

num1 = 5
num2 = 10
sum_result = operator.add(num1, num2)
print("Sum:", sum_result)

"""3. Find and Calculate Squatre root. Using Input."""

# Method 1: Using the math module
import math

# Taking input from the user
number = float(input("Enter a number: "))

# Calculating square root using math.sqrt()
square_root = math.sqrt(number)

# Printing the result
print(f"The square root of {number} is: {square_root}")

# Method 2: Using the ** operator
# Taking input from the user
number = float(input("Enter a number: "))

# Calculating square root using the ** operator
square_root = number ** 0.5

# Printing the result
print(f"The square root of {number} is: {square_root}")

# Method 3: Using the pow function
# Taking input from the user
number = float(input("Enter a number: "))

# Calculating square root using the pow function
square_root = pow(number, 0.5)

# Printing the result
print(f"The square root of {number} is: {square_root}")

# Method 4: Using the sqrt function from the numpy library
import numpy as np

# Taking input from the user
number = float(input("Enter a number: "))

# Calculating square root using numpy.sqrt()
square_root = np.sqrt(number)

# Printing the result
print(f"The square root of {number} is: {square_root}")

# Method 5: Using the decimal module
from decimal import Decimal, getcontext

# Setting precision for the decimal module
getcontext().prec = 10

# Taking input from the user
number = Decimal(input("Enter a number: "))

# Calculating square root using the sqrt() method of Decimal
square_root = number.sqrt()

# Printing the result
print(f"The square root of {number} is: {square_root}")

# Method 6: Using the math.sqrt() function directly
import math

# Taking input from the user
number = float(input("Enter a number: "))

# Calculating square root using math.sqrt()
square_root = math.sqrt(number)

# Printing the result
print(f"The square root of {number} is: {square_root}")

# Method 7: Using the cmath module for complex numbers
import cmath

# Taking input from the user
number = complex(input("Enter a complex number (in the form a+bj): "))

# Calculating square root using cmath.sqrt()
square_root = cmath.sqrt(number)

# Printing the result
print(f"The square root of {number} is: {square_root}")

# Method 8: Using the Babylonian method (approximation)
# Taking input from the user
number = float(input("Enter a number: "))

# Initial guess for square root
guess = number / 2

# Applying the Babylonian method for approximation
for _ in range(5):  # Adjust the number of iterations for accuracy
    guess = 0.5 * (guess + number / guess)

# Printing the result
print(f"The square root of {number} (approximation) is: {guess}")

# Method 9: Implementing Newton's method
# Taking input from the user
number = float(input("Enter a number: "))

# Initial guess for square root
guess = number / 2

# Applying Newton's method for approximation
for _ in range(5):  # Adjust the number of iterations for accuracy
    guess = 0.5 * (guess + number / guess)

# Printing the result
print(f"The square root of {number} (Newton's method) is: {guess}")

# Method 10: Using the sympy library for symbolic computation
from sympy import symbols, sqrt

# Taking input from the user
x = symbols('x')
number = float(input("Enter a number: "))

# Calculating square root symbolically using sympy.sqrt()
square_root = sqrt(number)

# Printing the result
print(f"The square root of {number} (symbolic) is: {square_root}")

"""# **4. How to calculate area of triangle. Using Input. solution - **(0.5 * base * height)

"""

# Method 1: Direct Formula Calculation
# Taking input for base and height from the user
base = float(input("Enter the base of the triangle: "))
height = float(input("Enter the height of the triangle: "))

# Calculating the area using the formula
area = 0.5 * base * height

# Printing the result
print(f"The area of the triangle is: {area}")

# Method 2: Using a Function
def calculate_triangle_area(base, height):
    """
    Function to calculate the area of a triangle.
    :param base: Base of the triangle
    :param height: Height of the triangle
    :return: Area of the triangle
    """
    return 0.5 * base * height

# Taking input for base and height from the user
base = float(input("Enter the base of the triangle: "))
height = float(input("Enter the height of the triangle: "))

# Calculating the area using the function
area = calculate_triangle_area(base, height)

# Printing the result
print(f"The area of the triangle is: {area}")

# Method 3: Using a Class
class Triangle:
    def __init__(self, base, height):
        self.base = base
        self.height = height

    def calculate_area(self):
        """
        Method to calculate the area of the triangle.
        :return: Area of the triangle
        """
        return 0.5 * self.base * self.height

# Taking input for base and height from the user
base = float(input("Enter the base of the triangle: "))
height = float(input("Enter the height of the triangle: "))

# Creating an instance of the Triangle class
triangle = Triangle(base, height)

# Calculating the area using the class method
area = triangle.calculate_area()

# Printing the result
print(f"The area of the triangle is: {area}")

# Method 4: Using Heron's Formula for Sides
import math

# Taking input for the three sides of the triangle
side_a = float(input("Enter the length of side a: "))
side_b = float(input("Enter the length of side b: "))
side_c = float(input("Enter the length of side c: "))

# Calculating the semi-perimeter
s = (side_a + side_b + side_c) / 2

# Calculating the area using Heron's Formula
area = math.sqrt(s * (s - side_a) * (s - side_b) * (s - side_c))

# Printing the result
print(f"The area of the triangle is: {area}")

# Method 5: Using the math.hypot() function for right-angled triangles
import math

# Taking input for the base and perpendicular height from the user
base = float(input("Enter the base of the right-angled triangle: "))
height = float(input("Enter the perpendicular height of the right-angled triangle: "))

# Calculating the area using the formula
area = 0.5 * base * height

# Printing the result
print(f"The area of the right-angled triangle is: {area}")

# Method 6: Using the Shoelace Formula for vertices
# Taking input for the coordinates of the three vertices from the user
x1, y1 = map(float, input("Enter the coordinates of vertex 1 (x y): ").split())
x2, y2 = map(float, input("Enter the coordinates of vertex 2 (x y): ").split())
x3, y3 = map(float, input("Enter the coordinates of vertex 3 (x y): ").split())

# Calculating the area using the Shoelace Formula
area = 0.5 * abs((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)))

# Printing the result
print(f"The area of the triangle is: {area}")

# Method 7: Using the Monte Carlo Method
import random

# Taking input for the base and height limits from the user
base = float(input("Enter the base of the rectangle bounding the triangle: "))
height = float(input("Enter the height of the rectangle bounding the triangle: "))

# Simulating random points and counting those inside the triangle
total_points = 100000
points_inside = 0

for _ in range(total_points):
    x = random.uniform(0, base)
    y = random.uniform(0, height)

    if y <= -height/base * x + height:
        points_inside += 1

# Calculating the area using the Monte Carlo Method
area = (points_inside / total_points) * base * height

# Printing the result
print(f"The area of the triangle is (Monte Carlo Method): {area}")

"""5. Swap two variables. Change the places."""

# Method 1: Using a Temporary Variable
# Taking input for two variables from the user
a = input("Enter the value of variable 'a': ")
b = input("Enter the value of variable 'b': ")

# Swapping using a temporary variable
temp = a
a = b
b = temp

# Printing the swapped variables
print(f"After swapping, 'a' is: {a}")
print(f"After swapping, 'b' is: {b}")

# Method 2: Using Tuple Unpacking
# Taking input for two variables from the user
a = input("Enter the value of variable 'a': ")
b = input("Enter the value of variable 'b': ")

# Swapping using tuple unpacking
a, b = b, a

# Printing the swapped variables
print(f"After swapping, 'a' is: {a}")
print(f"After swapping, 'b' is: {b}")

# Method 3: Using Arithmetic Operations
# Taking input for two variables from the user
a = int(input("Enter the value of variable 'a': "))
b = int(input("Enter the value of variable 'b': "))

# Swapping using arithmetic operations
a = a + b
b = a - b
a = a - b

# Printing the swapped variables
print(f"After swapping, 'a' is: {a}")
print(f"After swapping, 'b' is: {b}")

# Method 4: Using XOR Bitwise Operation
# Taking input for two variables from the user
a = int(input("Enter the value of variable 'a': "))
b = int(input("Enter the value of variable 'b': "))

# Swapping using XOR bitwise operation
a = a ^ b
b = a ^ b
a = a ^ b

# Printing the swapped variables
print(f"After swapping, 'a' is: {a}")
print(f"After swapping, 'b' is: {b}")

# Method 5: Using a Pythonic One-Liner
# Taking input for two variables from the user
a = input("Enter the value of variable 'a': ")
b = input("Enter the value of variable 'b': ")

# Swapping using a Pythonic one-liner
a, b = b, a

# Printing the swapped variables
print(f"After swapping, 'a' is: {a}")
print(f"After swapping, 'b' is: {b}")

"""6. Convert Kilometers to Miles."""

# Method 1: Using a Conversion Factor
# Taking input for kilometers from the user
kilometers = float(input("Enter the distance in kilometers: "))

# Conversion factor (1 kilometer = 0.621371 miles)
conversion_factor = 0.621371

# Converting kilometers to miles
miles = kilometers * conversion_factor

# Printing the result
print(f"{kilometers} kilometers is equal to {miles} miles")

# Method 2: Using a Function
def km_to_miles(kilometers):
    """
    Function to convert kilometers to miles.
    :param kilometers: Distance in kilometers
    :return: Equivalent distance in miles
    """
    return kilometers * 0.621371

# Taking input for kilometers from the user
kilometers = float(input("Enter the distance in kilometers: "))

# Calling the function to convert kilometers to miles
miles = km_to_miles(kilometers)

# Printing the result
print(f"{kilometers} kilometers is equal to {miles} miles")

# Method 3: Using the round() function for Decimal Places
# Taking input for kilometers from the user
kilometers = float(input("Enter the distance in kilometers: "))

# Converting kilometers to miles and rounding to 2 decimal places
miles = round(kilometers * 0.621371, 2)

# Printing the result
print(f"{kilometers} kilometers is equal to {miles} miles")

# Method 4: Using String Formatting for Precision
# Taking input for kilometers from the user
kilometers = float(input("Enter the distance in kilometers: "))

# Converting kilometers to miles with 2 decimal places using string formatting
miles = "{:.2f}".format(kilometers * 0.621371)

# Printing the result
print(f"{kilometers} kilometers is equal to {miles} miles")

# Method 5: Using f-strings for Output Formatting
# Taking input for kilometers from the user
kilometers = float(input("Enter the distance in kilometers: "))

# Converting kilometers to miles using f-string for formatting
miles = f"{kilometers * 0.621371:.2f}"

# Printing the result
print(f"{kilometers} kilometers is equal to {miles} miles")

"""7. Is a number positive, negative or Zero"""



"""8. Is a number Odd or Even?"""



"""9. Check Leap Year."""



"""10. Find Largest among three numbers."""



"""11. Write a program to check Prime Numbers."""



"""12. Write a program a genrate a random number."""



"""13. Write a program to print all Prime numbers in an Interval."""



"""14. Convert Celsius to Farenheit."""



"""15. Find factorial on a number."""



"""16. Display the multiplication table."""

